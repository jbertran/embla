(boot (build))
(boot (run_file))
(boot (run_file "fuierhguih"))
(boot (build))
(defrect 
)
(boot (build))
(defgom "super")
(use 'clojure.gom)
(use 'embla.clojure.gom)
(use gom)
(use gom.clj)
(use embla.gom)
(use clojure.embla.gom)
(use java.embla.view.glShapes
)
(use java.embla.view.glShapes.GLSprite)
(+ 1 2)
(boot (build))
(use embla.gom)
(use clj.embla.gom)
(use 'clj.embla.gom)
(boot (build))
(use 'embla.gom)
(use 'clj.gom)
(use 'clj.embla.gom)
(boot (build))
(build (boot))
(boot (build))
(use 'clj.embla.gom)
(use 'embla.gom)
(defrect (0 0 0 0 "rect"))
(defrect [0 0 0 0 "rect"])
(defrect [0 0 0 0 0])
(boot (build))
<<<<<<< HEAD
(use 'embla.gom)
=======
(use 'jv.embla.view.glUtils.GameEngine)
>>>>>>> master
(boot (build))
which javac
(boot (build))
(use 'clj.embla.core)
(boot (build))
(use 'clj.embla.core)
(boot (build))
(use 'clj.embla.core)
(+ 1 2)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
[org.lwjgl/lwjgl-platform "3.0.0b" :classifier "natives-osx"] [org.lwjgl/lwjgl-platform "3.0.0b" :classifier "natives-windows"][org.lwjgl/lwjgl-platform "3.0.0b" :classifier "natives-osx"] [org.lwjgl/lwjgl-platform "3.0.0b" :classifier "natives-windows"]
ls
(-main)
(boot (build))
(-main)
(boot (build))
(-main)
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(boot (build))
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(-main)
(boot (build))
(-main)
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(use 'clj.embla.core)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(-main)
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(-main)
(use 'clj.embla.core)
(-main)
(boot (build))
(use 'clj.embla.core)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(-main)
(boot (build))
(use 'clj.embla.core)
(-main)
(boot (build))
(+ 1 3)
(boot (build))
(boot (run))
ns
(all-ns)
(#object[clojure.lang.Namespace 0x40428e76 "clojure.tools.nrepl.ack"] #object[clojure.lang.Namespace 0x20ebeeeb "boot.from.io.aviso.exception"] #object[clojure.lang.Namespace 0xd7c63d5 "clojure.stacktrace"] #object[clojure.lang.Namespace 0xfa38d20 "boot.core"] #object[clojure.lang.Namespace 0x5b46839c "boot.task.bui
lt-in"] #object[clojure.lang.Namespace 0x24a5b2a9 "clojure.uuid"] #object[clojure.lang.Namespace 0x4a290f23 "complete.core"] #object[clojure.lang.Namespace 0x59f041cb "clojure.main"] #object[clojure.lang.Namespace 0x3645730a "clojure.tools.nrepl.middleware.session"] #object[clojure.lang.Namespace 0x3ffcaf91 "user"]
#object[clojure.lang.Namespace 0x3daeef5a "clojure.test"] #object[clojure.lang.Namespace 0x668b0f3d "boot.file"] #object[clojure.lang.Namespace 0x7bcbedc5 "dynapath.dynamic-classpath"] #object[clojure.lang.Namespace 0x2191450a "boot.jar"] #object[clojure.lang.Namespace 0x6b0fba5d "clojure.data"] #object[clojure.lang
.Namespace 0x5543b2e6 "boot.from.me.raynes.conch"] #object[clojure.lang.Namespace 0x71c2d84e "clojure.tools.nrepl.server"] #object[clojure.lang.Namespace 0x5a507a69 "dynapath.util"] #object[clojure.lang.Namespace 0x4c1bfe2c "boot.repl-server"] #object[clojure.lang.Namespace 0x487b1cb "clojure.java.io"] #object[cloju
re.lang.Namespace 0x63e009bd "boot.from.backtick"] #object[clojure.lang.Namespace 0x3abaa49a "boot.repl"] #object[clojure.lang.Namespace 0x2943d77f "boot.cli"] #object[clojure.lang.Namespace 0x10f33275 "clojure.core.protocols"] #object[clojure.lang.Namespace 0x73bd6c37 "boot.main"] #object[clojure.lang.Namespace 0x1
ccc88ae "boot.from.table.width"] #object[clojure.lang.Namespace 0x2b034c67 "clojure.tools.nrepl.transport"] #object[clojure.lang.Namespace 0x226aa3e8 "clojure.pprint"] #object[clojure.lang.Namespace 0x3a2ebf46 "boot.from.digest"] #object[clojure.lang.Namespace 0x425fc955 "clojure.tools.nrepl.middleware.interruptible
-eval"] #object[clojure.lang.Namespace 0x738ec50d "boot.filesystem"] #object[clojure.lang.Namespace 0x40c5d77 "boot.from.io.aviso.repl"] #object[clojure.lang.Namespace 0x4b97163f "boot.util"] #object[clojure.lang.Namespace 0x77be7b79 "boot.from.table.core"] #object[clojure.lang.Namespace 0x721d6e2e "boot.tmpregistry
"] #object[clojure.lang.Namespace 0x141c72ff "clojure.tools.nrepl.middleware.pr-values"] #object[clojure.lang.Namespace 0x6749b8ad "reply.exports"] #object[clojure.lang.Namespace 0x6328628e "boot.tmpdir"] #object[clojure.lang.Namespace 0x7a5d1cdb "clojure.instant"] #object[clojure.lang.Namespace 0xd2112e5 "boot.kahn
sort"] #object[clojure.lang.Namespace 0x27875f3c "clojure.set"] #object[clojure.lang.Namespace 0x79b6550 "boot.gpg"] #object[clojure.lang.Namespace 0x15b20abc "boot.from.clojure.tools.cli"] #object[clojure.lang.Namespace 0x108184d5 "clojure.string"] #object[clojure.lang.Namespace 0xd625746 "clojure.java.browse"] #ob
ject[clojure.lang.Namespace 0x518f025f "boot.from.io.aviso.writer"] #object[clojure.lang.Namespace 0x54ed0538 "clojure.tools.nrepl.middleware.load-file"] #object[clojure.lang.Namespace 0x48d6945c "clojure.java.javadoc"] #object[clojure.lang.Namespace 0x57112267 "clojure.tools.nrepl"] #object[clojure.lang.Namespace 0
x7ea54f20 "clojure.repl"] #object[clojure.lang.Namespace 0x42dd4109 "boot.task-helpers"] #object[clojure.lang.Namespace 0x3e55597a "boot.from.io.aviso.nrepl"] #object[clojure.lang.Namespace 0x608946cd "boot.pod"] #object[clojure.lang.Namespace 0x3401c9b3 "clojure.tools.nrepl.bencode"] #object[clojure.lang.Namespace
0x1cfc0333 "boot.user"] #object[clojure.lang.Namespace 0x8f6075f "boot.pedantic"] #object[clojure.lang.Namespace 0x22e397a2 "clojure.tools.nrepl.middleware"] #object[clojure.lang.Namespace 0x18159e1c "clojure.template"] #object[clojure.lang.Namespace 0x648ce3b6 "clojure.java.shell"] #object[clojure.lang.Namespace 0x
5cf8dc87 "clojure.core"] #object[clojure.lang.Namespace 0x62181e3d "clojure.tools.nrepl.misc"] #object[clojure.lang.Namespace 0x5649891c "boot.from.io.aviso.ansi"] #object[clojure.lang.Namespace 0x55db5130 "boot.from.io.aviso.columns"] #object[clojure.lang.Namespace 0x4fddb3e8 "clojure.walk"] #object[clojure.lang.Na
mespace 0x6d96b5d8 "boot.git"] #object[clojure.lang.Namespace 0x770dd01f "dynapath.defaults"])
(boot (build))
(boot (run))
(all-ns)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
ls
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(defrect 'truc')
(use 'clj.embla.gom)
(build)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(use 'clj.embla.signals)
(use 'clj.embla.gom)
(defrect)
(macroexpand '(defrect))
(macroexpand '(defrect 'truc'))
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2}))
re
(use 'clj.embla.core)
re
`re
(boot (build))
(use 'clj.embla.gom)
re
`re
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2}))
(boot (build))
(use 'clj.embla.gom)
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2}))
`re
(use 'clj.embla.core)
`re
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2})
(boot (build))
(use 'clj.embla.gom)
(use 'clj.embla.core)
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2}))
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2 :color red}))
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2})
(import 'org.lwjgl.util.Color)
(Color.)
(boot (build))
(use 'clj.embla.gom)
(use 'clj.embla.core)
black
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2 :color black})
(defrect {:id "truc" :length 400 :height 400 :x 2 :y 2 :color black})
