(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.getWorld render-engine)
(import java.awt.Color)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (Color.BLACK) :id "none"))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color Color.BLACK :id "none"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(.getWorld render-engine)
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(println (.children (.getWorld render-engine)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (build))
(boot (run))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(println (.children (.getWorld render-engine)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(import java.awt.Color)
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(import java.awt.Color)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "none"}))
(boot (build))
(boot (run))
qdz
(use 'clj.tests.print)
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 100 :radius 100 :color (color 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "123"}))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 5000 :color (color 255 255 255) :id "machin"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 50 :color (color 255 255 255) :id "machin"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}
)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(.getWorld render-engine)
(.get (.children (.getWorld render-engine)) 0)
(.get (.children (.get (.children (.getWorld render-engine)) 0)) 0)
(.children (.get (.children (.getWorld render-engine)) 0))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"})
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(boot (build))
(boot (run))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(show-world)
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "c1"}))
(show-world)
(boot (buiuild))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(getnodebyID "lol")
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(getnodebyID "lol")
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(let [n (getnodebyID "lel")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lel"})))
(show-world)
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(boot (build))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(show-world)
(clear-all)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(show-world)
(boot (build))
(boot (run))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 50 :color (color 255 255 255) :id "lol"}))
(show-world)
(.addChild (.getWorld render-engine) (defrect {:x 200 :y 200 :length 50 :width 150 :color (color 255 255 255) :id "trouf"}))
(show-world)
(.addChild (.getWorld render-engine) (defrect {:x 200 :y 200 :length 50 :height 150 :color (color 255 255 255) :id "trouf"}))
(show-world)
(create-signal test)
(create-signal 'test)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(use 'cle.embla.signals)
(use 'clj.embla.signals)
(boot (build))
custom-signals
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
custom-signals
(create-signals 'test)
(create-signal 'test)
(create-signal "test")
(macroexpand '(create-signal 'test))
(macroexpand '(create-signal "test"))
(boot (build))
(boot (run))
(create-signal 'test)
(create-signal test)
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(create-signal name)
(search-signal "name")
(search-signal "keyboard-input")
(search-signal "test")
(signal-register "test" 'fret)
(signal-register "name" 'fret)
(search-signal "name")
(defsigf keyboard-input
(if (= (fst msg) :D)
(prtinln "Gloups")))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(boot (build))
(boot (run))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(boot (build))
(boot (run))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(println (macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups")))))
(use 'clj.embla.signals)
(println (macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups")))))
(println (macroexpand '(defsigf keyboard-input (println "grloups"))))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(println (macroexpand '(defsigf keyboard-input (println "grloups"))))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(macroexpand '(create-signal test))
(create-signal test)
(boot (run))
(boot (build))
(boot (run))
(macroexpand '(create-signal test))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))
(boot (run))
(macroexpand '(create-signal test))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(search-signal "keyboard-input")
(defsigf keyboard-input (println "grloups"))
(search-signal "keyboard-input")
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(search-signal "keyboard-input")
(boot (run))
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println "grloups"))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))*
*
(boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(defsigf keyboard-input (println "grloups"))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(defsigf keyboard-input (println "grloups"))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(defsigf keyboard-input (println msg))
(broadcast-all)
(custom-signals)
(search-signal "keyboard-input")
(boot (build)) (boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println msg))
(search-signal "keyboard-input")
(boot (build)) (boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println msg))
(search-signal "keyboard-input")
custom-signals
keyboard-input
(broadcast-all)
(let [truc (<!! keyboard-input)]
(println truc))
(let [truc (clojure.core.async/<!! keyboard-input)] (println truc))
(boot (build)) (boot (run))
(let [truc (clojure.core.async/<!! keyboard-input)] (println truc))
custom-signals
keyboard-input
(defsigf keyboard-input (println msg))
custom-signals
(broadcast-all)
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
custom-signals
keyboard-input
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(defsigf keyboard-input (.relativeMoveTo (getnodebyID "trouf") 10 10))
(broadcast-all)
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(spit "~/Desktop/lolilol" (.getWorld render-engine))
(spit "/home/jordi/Desktop/lolilol" (.getWorld render-engine))
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(spit "/home/jordi/Desktop/lolilol" (.getWorld render-engine))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 100 :y 100 :radius 50 :color (color 0 0 0) :id "circle"})
(.addChild (.getWorld render-engine) (defcircle {:x 100 :y 100 :radius 50 :color (color 0 0 0) :id "circle"}))
(show-world)
(clear-all)
(.addChild (.getWorld render-engine) (defcircle {:x 100 :y 100 :radius 50 :color (color 0 0 0) :id "circle"}))
(clear-all)
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 100 :y 100 :radius 50 :color (color 0 0 0) :id "rond"}))
(boot (build)) (boot (run))
glxinfo
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 100 :y 100 :radius 50 :color (color 0 0 0) :id "rond"}))
(boot (build))
(boot (run))
(show-world)
(clear-all)
(.addChild (world) (defrect {:x 100 :y 100 :width 200 :height 200 :color (color 255 0 0) :id "hi"}))
*
(show-world)
(.addChild (world) (defrect {:x 150 :y 150 :width 100 :height 00 :color (color 0 255 0) :id "hi"}))
(.addChild (world) (defrect {:x 150 :y 150 :width 100 :height 00 :color (color 0 255 0) :id "hilol"}))
(show-world)
(boot (build))
(boot (run))
ls
(add-children (world) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 255) :id "circle"}))
(add-children (get-world) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 255) :id "circle"}))
(let [n (node-by-id "circle")]
(add-children n (defrect {:x 150 :y 150 :width 100 :length 100 :color (color 255 0 0) :id "rect"})))
(let [n (node-by-id "circle")] (add-children n (defrect {:x 150 :y 150 :width 100 :length 100 :color (color 255 0 0) :id "rect"})))
(node-by-id "circle")
(let [n (node-by-id "circle")] (add-children n (defrect {:x 150 :y 150 :width 100 :length 100 :color (color 255 0 0
(add-children (node-by-id "circle") (defrect {:x 150 :y 150 :width 100 :length 100 :color (color 255 0 0) :id "rect"}))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(add-child (world) (defcircle {:x 200 :y 200 :radius 200 :color (color 255 0 0}
(add-child (world) (defcircle {:x 200 :y 200 :radius 200 :color (color 255 0 0) :id "c"}))
(add-child (get-world) (defcircle {:x 200 :y 200 :radius 200 :color (color 255 0 0) :id "c"}))
(add-child (get-node "c") (defrect {:x 150 :y 150 :height 100 :width 100 :color (color 255 0 0) :id "c"})
(add-child (get-node "c") (defrect {:x 150 :y 150 :height 100 :width 100 :color (color 0 255 0) :id "r"}))
(add-child (node-by-id "c") (defrect {:x 150 :y 150 :height 100 :width 100 :color (color 0 255 0) :id "r"}))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine)
           (defcircle {:x 100
                       :y 100
                       :radius 50
                       :color (color 0 0 0)
                       :id "outer"}
             (defcircle {:x 100
                         :y 100
                         :radius 25
                         :color (color 255 255 255)
                         :id "inner"})))
(do
  (defsig  time (timer))
  (defsigf time
    (println "Time ! " msg))
  (defsigf keyboard-input
    (case (fst msg)
      :Z (.relativeMoveTo (node-by-id "inner")  0  1)
      :Q (.relativeMoveTo (node-by-id "inner")  0 -1)
      :S (.relativeMoveTo (node-by-id "inner") -1  0)
      :D (.relativeMoveTo (node-by-id "inner")  1  0))))
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine)
           (defcircle {:x 100
                       :y 100
                       :radius 50
                       :color (color 0 0 0)
                       :id "outer"}
             (defcircle {:x 100
                         :y 100
                         :radius 25
                         :color (color 255 255 255)
                         :id "inner"})))
  (defsig  time (timer))
(defsigf time
    (println "Time ! " msg))
 (defsigf keyboard-input
    (case (fst msg)
      :Z (.relativeMoveTo (node-by-id "inner")  0  1)
      :Q (.relativeMoveTo (node-by-id "inner")  0 -1)
      :S (.relativeMoveTo (node-by-id "inner") -1  0)
      :D (.relativeMoveTo (node-by-id "inner")  1  0)))
(defsigf keyboard-input
    (let [value (fst msg)]
      (case value
        :Z (.relativeMoveTo (node-by-id "inner")  0  1)
        :Q (.relativeMoveTo (node-by-id "inner")  0 -1)
        :S (.relativeMoveTo (node-by-id "inner") -1  0)
        :D (.relativeMoveTo (node-by-id "inner")  1  0))))
(defsigf keyboard-input (println (fst msg)))
(macroexpand '(defsigf keyboard-input (println (fst msg))))
(defsigf keyboard-input
    (let [value (first msg)]
      (case value
        :Z (.relativeMoveTo (node-by-id "inner")  0  1)
        :Q (.relativeMoveTo (node-by-id "inner")  0 -1)
        :S (.relativeMoveTo (node-by-id "inner") -1  0)
        :D (.relativeMoveTo (node-by-id "inner")  1  0))))
(broadcast-all)
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine)
           (defcircle {:x 100
                       :y 100
                       :radius 50
                       :color (color 0 0 0)
                       :id "outer"}
             (defcircle {:x 100
                         :y 100
                         :radius 25
                         :color (color 255 255 255)
                         :id "inner"})))
(do
  (defsig  time (timer))
  (defsigf time
    (println "Time ! " msg))
  (defsigf keyboard-input
    (let [value (first msg)]
      (case value
        :Z (.relativeMoveTo (node-by-id "inner")  0  1)
        :S (.relativeMoveTo (node-by-id "inner")  0 -1)
        :Q (.relativeMoveTo (node-by-id "inner") -1  0)
        :D (.relativeMoveTo (node-by-id "inner")  1  0)))))
(broadcast-all)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
(boot (build)) (boot (run))
(use 'clj.embla.examples)
