`re
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2})
(boot (build))
(use 'clj.embla.gom)
(use 'clj.embla.core)
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2}))
(macroexpand '(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2 :color red}))
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2})
(import 'org.lwjgl.util.Color)
(Color.)
(boot (build))
(use 'clj.embla.gom)
(use 'clj.embla.core)
black
(defrect {:id 'truc' :length 400 :height 400 :x 2 :y 2 :color black})
(defrect {:id "truc" :length 400 :height 400 :x 2 :y 2 :color black})
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(use 'clj.tests.print)
(boot (build))
(boot (run))
(use 'clj.tests.print)
(boot (run))
render-engine
(.getWorld render-engine)
(.addChildren (.getWorld render-engine) (defrect {:x 0 :y 0 :length 100 :width 100 :color (Color . 255 255 255) :id "none"}))
(use 'java.awt.Color)
(require 'java.awt.Color)
  (if (search-signal (.toString sig-name))
    (throw (Exception. "Trying to create an already existent signal."))
    (let [channel (chan)
          sig1 (chan)
          sig2 (chan)]
      (signal-register name1 sig1)
      (signal-register name2 sig2)
      (go-loop []
        (let [msg1 (<! sig1)
              msg2 (<! sig2)]
          (>! chan (func msg1 msg2)))
        (recur))
      (alter-var-root (var custom-signals) #(cons (list (.toString sig-name) channel (atom '())) %)))))
(defn broadcast-all
  "Transfer the value from the channel to all functions which need it."
  []
  (loop [[sig & signals] custom-signals]
    (let [input  (second sig)
          output (second (rest sig))]
      (go-loop []
        (let [msg (<! input)]
          (map #(go (>! % msg)) output))
        (recur))
      (if-not (empty? signals)
        (recur signals)))))
  (if (search-signal (.toString sig-name))
    (throw (Exception. "Trying to create an already existent signal."))
    (let [channel (chan)
          sig1 (chan)
          sig2 (chan)]
      (signal-register name1 sig1)
      (signal-register name2 sig2)
      (go-loop []
        (let [msg1 (<! sig1)
              msg2 (<! sig2)]
          (>! chan (func msg1 msg2)))
        (recur))
      (alter-var-root (var custom-signals) #(cons (list (.toString sig-name) channel (atom '())) %)))))
(defn broadcast-all
  "Transfer the value from the channel to all functions which need it."
  []
  (loop [[sig & signals] custom-signals]
    (let [input  (second sig)
          output (second (rest sig))]
      (go-loop []
        (let [msg (<! input)]
          (map #(go (>! % msg)) output))
        (recur))
      (if-not (empty? signals)
        (recur signals)))))
  (if (search-signal (.toString sig-name))
    (throw (Exception. "Trying to create an already existent signal."))
    (let [channel (chan)
          sig1 (chan)
          sig2 (chan)]
      (signal-register name1 sig1)
      (signal-register name2 sig2)
      (go-loop []
        (let [msg1 (<! sig1)
              msg2 (<! sig2)]
          (>! chan (func msg1 msg2)))
        (recur))
      (alter-var-root (var custom-signals) #(cons (list (.toString sig-name) channel (atom '())) %)))))
(defn broadcast-all
  "Transfer the value from the channel to all functions which need it."
  []
  (loop [[sig & signals] custom-signals]
    (let [input  (second sig)
          output (second (rest sig))]
      (go-loop []
        (let [msg (<! input)]
          (map #(go (>! % msg)) output))
        (recur))
      (if-not (empty? signals)
        (recur signals)))))
(.addChildren (.getWorld render-engine) (defrect {:x 0 :y 0 :length 100 :width 100 :color (Color . 255 255 255) :id "none"}))
(import java.awt.Color)
(.addChildren (.getWorld render-engine) (defrect {:x 0 :y 0 :length 100 :width 100 :color (Color . 255 255 255) :id "none"}))
(.addChildren (.getWorld render-engine) (defrect {:x 0 :y 0 :length 100 :width 100 :color (Color. 255 255 255) :id "none"}))
(.toString (.getWorld render-engine))
(println (.toString (.getWorld render-engine)))
(println (children (.getWorld render-engine)))
(println (.children (.getWorld render-engine)))
(boot (build))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (build))
(boot (run))
(println (.children (.getWorld render-engine)))
(println (.children (.children (.getWorld render-engine))))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (run))
(println (.children (.children (.getWorld render-engine))))
(println (.children (.getWorld render-engine)))
(println (.children (.children (.getWorld render-engine))))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (build))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (build))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (run))
render-engine
(boot (build))
(boot (run))
(println (.children (.getWorld render-engine)))
(boot (run))
(println (.children (.getWorld render-engine)))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.getWorld render-engine)
(import java.awt.Color)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (Color.BLACK) :id "none"))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color Color.BLACK :id "none"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(.getWorld render-engine)
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(println (.children (.getWorld render-engine)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (build))
(boot (run))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(println (.children (.getWorld render-engine)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(import java.awt.Color)
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(import java.awt.Color)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(println (.children (.get (.children (.getWorld render-engine)) 0)))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (Color. 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "none"}))
(boot (build))
(boot (run))
qdz
(use 'clj.tests.print)
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 100 :radius 100 :color (color 0 0 0) :id "none"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "123"}))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 5000 :color (color 255 255 255) :id "machin"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 50 :color (color 255 255 255) :id "machin"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "truc"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}
)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(.getWorld render-engine)
(.get (.children (.getWorld render-engine)) 0)
(.get (.children (.get (.children (.getWorld render-engine)) 0)) 0)
(.children (.get (.children (.getWorld render-engine)) 0))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"})
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(boot (build))
(boot (run))
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "c1"}))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(boot (build))
(boot (run))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c2"}))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 200 :color (color 0 0 0) :id "c1"}))
(show-world)
(.addChild (.get (.children (.getWorld render-engine)) 0) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "c1"}))
(show-world)
(boot (buiuild))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(getnodebyID "lol")
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(getnodebyID "lol")
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(let [n (getnodebyID "lel")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lel"})))
(show-world)
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(boot (build))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "lel"})))
(boot (build))
(boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(show-world)
(clear-all)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(show-world)
(boot (build))
(boot (run))
(show-world)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 0 0 0) :id "lol"}))
(let [n (getnodebyID "lol")] (.addChild n (defcircle {:x 200 :y 200 :radius 50 :color (color 0 0 0) :id "lel"})))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 50 :color (color 255 255 255) :id "lol"}))
(show-world)
(.addChild (.getWorld render-engine) (defrect {:x 200 :y 200 :length 50 :width 150 :color (color 255 255 255) :id "trouf"}))
(show-world)
(.addChild (.getWorld render-engine) (defrect {:x 200 :y 200 :length 50 :height 150 :color (color 255 255 255) :id "trouf"}))
(show-world)
(create-signal test)
(create-signal 'test)
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(use 'cle.embla.signals)
(use 'clj.embla.signals)
(boot (build))
custom-signals
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
custom-signals
(create-signals 'test)
(create-signal 'test)
(create-signal "test")
(macroexpand '(create-signal 'test))
(macroexpand '(create-signal "test"))
(boot (build))
(boot (run))
(create-signal 'test)
(create-signal test)
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(create-signal name)
(search-signal "name")
(search-signal "keyboard-input")
(search-signal "test")
(signal-register "test" 'fret)
(signal-register "name" 'fret)
(search-signal "name")
(defsigf keyboard-input
(if (= (fst msg) :D)
(prtinln "Gloups")))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(boot (build))
(boot (run))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(boot (build))
(boot (run))
(macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups"))))
(println (macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups")))))
(use 'clj.embla.signals)
(println (macroexpand '(defsigf keyboard-input (if (= (fst msg) :D) (println "Gloups")))))
(println (macroexpand '(defsigf keyboard-input (println "grloups"))))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(println (macroexpand '(defsigf keyboard-input (println "grloups"))))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(macroexpand '(create-signal test))
(create-signal test)
(boot (run))
(boot (build))
(boot (run))
(macroexpand '(create-signal test))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))
(boot (run))
(macroexpand '(create-signal test))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(search-signal "keyboard-input")
(defsigf keyboard-input (println "grloups"))
(search-signal "keyboard-input")
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(search-signal "keyboard-input")
(boot (run))
(boot (build))
(boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println "grloups"))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(boot (build))
(boot (run))
(boot (build))
(boot (run))
(defsigf keyboard-input (println "grloups"))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build))*
*
(boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(defsigf keyboard-input (println "grloups"))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println "grloups")))
(defsigf keyboard-input (println "grloups"))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(macroexpand '(defsigf keyboard-input (println msg mest)))
(defsigf keyboard-input (println msg mest))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg mest))
(defsigf keyboard-input (println msg))
(broadcast-all)
(custom-signals)
(search-signal "keyboard-input")
(boot (build)) (boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println msg))
(search-signal "keyboard-input")
(boot (build)) (boot (run))
(search-signal "keyboard-input")
(defsigf keyboard-input (println msg))
(search-signal "keyboard-input")
custom-signals
keyboard-input
(broadcast-all)
(let [truc (<!! keyboard-input)]
(println truc))
(let [truc (clojure.core.async/<!! keyboard-input)] (println truc))
(boot (build)) (boot (run))
(let [truc (clojure.core.async/<!! keyboard-input)] (println truc))
custom-signals
keyboard-input
(defsigf keyboard-input (println msg))
custom-signals
(broadcast-all)
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
custom-signals
keyboard-input
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(broadcast-all)
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(boot (build)) (boot (run))
(defsigf keyboard-input (println msg))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(defsigf keyboard-input (.relativeMoveTo (getnodebyID "trouf") 10 10))
(broadcast-all)
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(spit "~/Desktop/lolilol" (.getWorld render-engine))
(spit "/home/jordi/Desktop/lolilol" (.getWorld render-engine))
(boot (build)) (boot (run))
(.addChild (.getWorld render-engine) (defcircle {:x 200 :y 200 :radius 100 :color (color 255 255 255) :id "trouf"}))
(spit "/home/jordi/Desktop/lolilol" (.getWorld render-engine))
